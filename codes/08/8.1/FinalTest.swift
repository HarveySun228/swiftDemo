final class Base{	final var name: String = ""	final func say(content: String)	{		println("Base实例说：\(content)")	}	final subscript(idx: Int) -> Int{		get{			println("父类的下标的get方法")			return idx + 10		}	}}class Sub : Base   // ①{	// 尝试重写覆盖的name属性	override var name: String {   // ②		get{			return "子类添加的前缀" + super.name		}		set{		}	}	// 尝试重写父类的方法	override func say(content: String)   // ③	{		println("重写父类的say方法，说的内容是：\(content)")	}	// 尝试重写父类的下标	override subscript(idx: Int) -> Int{   // ④		get{			println("重写后的下标的get方法")			println("通过super访问被重写之前的下标:\(super[idx])")			return idx * idx		}		set{			println("重写后的下标的setter方法,传入的参数值为：\(newValue)")		}	}	}