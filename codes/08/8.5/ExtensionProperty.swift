extension String{	// 通过扩展添加类型存储属性	static var data:[String:Any] = [:]	// 定义一个实例计算属性，并未该属性提供setter、getter部分	var length: Int{		get{			return countElements(self)		}		set{			var originLength = countElements(self)			// 如果新设置的长度大于字符串原有长度，在字符串后面添加空字符			if newValue > originLength {				for idx in 1...newValue - originLength				{					self += " "				}			}			// 如果新设置的长度小于字符串原有长度，将后面多余的字符截断			else if newValue < originLength			{				var tmp = ""				var count = 0				for ch in self				{					tmp = "\(tmp)\(ch)"					count++					// 如果已经拼接了newValue个字符，跳出循环					if count == newValue{						break					}				}				self = tmp			}		}	}}String.data["swift"] = 89String.data["OC"] = 92println(String.data)  // 输出 [OC: 92, swift: 89]var s = "fkit.org"// 通过length输出字符串的长度println(s.length)  // 输出 8// 通过设置lenght属性，截断String后面多出来的字符s.length = 5println(s)  // 输出 fkit.// 通过设置lenght属性，在String后面补充空格s.length = 20println(s)  // 输出 fkit.(后面还有15个空格)