// 实现Equatable协议class User: Equatable{	var name : String	var password: String	var age: Int	init(name: String , password: String , age: Int)	{		self.name = name		self.password = password		self.age = age	}}// 重载==运算符// （实际上就是重新定义名为==的函数，但形参列表与已有的==函数的形参列表并不相同)func == (lhs: User, rhs: User) -> Bool {	// 当两个User实例的name、password都相等时，即可认为两个User实例相等	return lhs.name == rhs.name		&& lhs.password == rhs.password}var u1 = User(name: "fkit" , password: "1223" , age: 30)var u2 = User(name: "fkit" , password: "1223" , age: 13)// u1、u2两个实例的name、password相等，即可认为两个实例相等。println(u1 == u2) // 输出truevar u3 = User(name: "fkit" , password: "2344" , age: 30)// u1、u3两个实例的password不相等，即使它们的name、age相等，但两个两个实例不相等。println(u1 == u3)  // 输出false