// 使用Eatable声明变量，将Apple实例赋值给food，这是向上转型var food1 : Eatable = Apple(name:"红富士")  // ①// 使用Eatable声明变量，将Pie实例赋值给food，这是向上转型var food2 : Eatable = Pie(weight:1.2)  // ②// 调用food1、food2（两个变量类型都是Eatable）的taste方法，这是多态food1.taste()food2.taste()// 定义一个函数，该函数的形参是个数可变的Eatable类型的形参func eat(foods : Eatable...)  // ③{	// 遍历foods个数可变的参数，foods相当于数组	for food in foods	{		food.taste()	}}// 由于该函数的参数之要求是Eatable，// 因此调用函数时既可传入Apple作为参数，也可传入Pie作为参数eat(Apple(name:"花牛果") , Pie(weight:0.5))// 声明foodArray是[Eatable]类型的变量，因此该数组可以装各种Eatable实现类型的实例var foodArray:[Eatable] = [Apple(name:"花牛果") , Apple(name:"蛇果")	, Pie(weight:0.2), Apple(name:"嘎拉果") , Pie(weight:0.6)]  // ④// 遍历foodArray数组for food in foodArray{	// 先使用as?对food进行可选性的向下转型，然后执行可选绑定	if let ap = food as? Apple	{		println("这个Eatable是苹果，名字为：\(ap.name)")	}	// 先使用as?对food进行可选性的向下转型，然后执行可选绑定	else if let pie = food as? Pie 	{		println("这个Eatable是饼干，重量为：\(pie.weight)")	}}