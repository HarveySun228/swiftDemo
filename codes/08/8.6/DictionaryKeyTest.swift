// 实现Hashable协议，该协议继承了Equatable协议struct User: Hashable,Printable{	var name : String	var password: String	var age: Int	init(name: String , password: String , age: Int)	{		self.name = name		self.password = password		self.age = age	}	var hashValue: Int	{		// 根据name、password的hashValue来计算User实例的hashValue		// 考虑到数据可能溢出，故此处采用溢出运算符		return name.hashValue &* 31 &+ password.hashValue	}	var description: String{		return "User[name=\(name), password=\(password), age=\(age)]"	} }// 重载==运算符func == (lhs: User, rhs: User) -> Bool {	// 当两个User实例的name、password都相等时，即可认为两个User实例相等	return lhs.name == rhs.name		&& lhs.password == rhs.password}// 定义字典，使用User作为字典的keyvar dict = [User:Int]()dict[User(name: "fkit" , password: "1223" , age: 30)] = 50dict[User(name: "fkit" , password: "2344" , age: 30)] = 220// 下面放入的key-value中key与字典中已有的key重复，新的value覆盖已有的valuedict[User(name: "fkit" , password: "1223" , age: 13)] = 100println(dict)