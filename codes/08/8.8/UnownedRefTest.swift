class Student{	var name : String	var age: Int	var coach: Coach?	init(name:String , age: Int)	{		self.name = name		self.age = age	}	// 定义析构器	deinit {		println("\(self.name)学生即将被销毁")	}	}class Coach{	var name: String	var skill: String	// 使用非可选的常量属性引用关联的Student	unowned let student: Student	init(name:String , skill: String , student: Student)	{		self.name = name		self.skill = skill		self.student = student	}	// 定义析构器	deinit {		println("\(self.name)教练即将被销毁")	}}var stu:Student? = Student(name:"孙悟空" ,age: 500)// 创建Coach对象，并让该Coach对象引用内存中的Student对象var coach:Coach? = Coach(name:"唐僧" , skill:"念经" , student: stu!)// 将stu的coach属性设为引用内存中的coach对象stu?.coach = coachstu = nilcoach = nil  // ①