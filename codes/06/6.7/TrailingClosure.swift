// 定义函数类型的形参，其中fn是(Int) -> Int类型的形参func map(var #data : [Int],  #fn: (Int) -> Int) -> [Int]{	// 遍历data数组中每个元素，并用fn函数计算对data[i]进行计算，	// 然后将计算结果作为新的数组元素	for var i = 0 , len = data.count ; i < len ; i++	{		data[i] = fn(data[i])	}	return data}var data = [3 , 4 , 9 , 5, 8]println("原数据\(data)")// 下面程序代码3次调用map()函数，每次调用时传入不同的闭包println("计算数组元素平方")// 尾随闭包，省略了形参类型、形参名、返回值类型、return关键字var rvt1 = map(data:data){$0 * $0}println(rvt1)println("计算数组元素立方")// 尾随闭包，省略了形参类型、形参名、返回值类型、return关键字var rvt2 = map(data:data){$0 * $0 * $0}println(rvt2)println("计算数组元素阶乘")// 尾随闭包，省略了形参类型、形参名、返回值类型、不能省略return关键字var rvt3 = map(data:data){	var result = 1	for index in 2...$0	{		result *= index	}	return result	}println(rvt3)