// 使用闭包表达式，由于程序定义了square的变量的类型// 因此Swift可以推断闭包表达式的形参、返回值类型，// 因此闭包表达式可以省略形参、返回值类型//var square:(Int) -> Int = {(val) in return val * val}// 省略形参类型后，也可省略形参列表的圆括号，即上面代码可以简化为如下形式var square:(Int) -> Int = {val in return val * val}// 使用square调用闭包println(square(5))  // 输出25println(square(6))  // 输出36// 由于调用闭包表达式传入了4、3，因此Swift可以推断闭包表达式的两个形参都是Int类型// 程序打算将闭包表达式的返回值赋值给Int类型的变量，因此该闭包表达式的返回值是Int类型// 只要Swift可以推断闭包表达式的形参、返回值类型，闭包表达式即可省略形参、返回值类型var result:Int = {base, exponent in	var result = 1	for i in 1...exponent	{		result *= base	}	return result}(4, 3)println(result)  // 输出64