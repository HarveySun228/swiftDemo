// 定义Apple类时使用了泛型声明class Apple<T>{	// 使用T类型形参定义实例变量	var info: T	// 下面使用T类型形参来定义构造器	init(info: T)	{		self.info = info;	}}// 扩展泛型类时，并不需要列出原有的类型参数extension Apple{	// 定义一个bigThan方法，该函数用于比较两个苹果的大小。	// 其中fn函数决定比较的标准。	func bigThan(other:Apple , fn:(T , T) -> Int) -> Bool{		if fn(self.info , other.info) > 0		{			return true		}		else		{			return false		}	}}var a1 = Apple<String>(info: "红富士")var a2 = Apple<String>(info: "澳洲青苹果")// 使用尾随闭包var result = a1.bigThan(a2){	countElements($0) > countElements($1) ? 1 : 0}  // ①println("a1是否大于a2：\(result)")