import Foundation@objc class User : Printable{	var name: String	var pass: String	init(name: String , pass: String)	{		self.name = name		self.pass = pass	}	func say(content: String)	{		println("\(self.name)说：\(content)")	}	// 重写isEqual()方法，重写该方法的比较标准是，	// 如果两个User的name、pass相等，即可认为两个User相等。	func isEqual(other:AnyObject) -> Bool	{		if self === other		{			return true		}		if other is User		{			let target = (other as User)			return self.name == target.name				&& self.pass == target.pass		}		return false	}	// 重写hash()方法，重写该方法的比较标准是，	// 如果两个User的name、pass相等，两个User的hash()方法返回值相等	func hash() -> Int	{		println("===hash===")		return name.hash &* 31 &+ pass.hash	}	// 重写description属性，可以直接看到FKUser对象的状态	var description: String	{		return "User[name=\(self.name), pass=\(self.pass)]"	}}// 定义一个函数，该函数可把NSSet集合转换为字符串func NSCollectionToString (collection:NSSet) -> String{	let result = NSMutableString(string:"[")	// 使用快速枚举遍历NSSet集合	for obj in collection	{		result.appendString((obj as User).description)		result.appendString(", ")	}	// 获取字符串长度	let len = result.length	// 去掉字符串最后的两个字符	result.deleteCharactersInRange(NSMakeRange(len - 2, 2))	result.appendString("]")	return result}let set = NSSet(objects: User(name:"sun", pass:"123"),	User(name:"bai", pass:"345"),	User(name:"sun", pass:"123"),	User(name:"tang", pass:"178"),	User(name:"niu", pass:"155"))println("set集合元素的个数：\(set.count)")println(NSCollectionToString(set))