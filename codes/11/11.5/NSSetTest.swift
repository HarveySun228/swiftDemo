import Foundation// 定义一个函数，该函数可把NSSet集合转换为字符串func NSCollectionToString (collection:NSSet) -> String{	let result = NSMutableString(string:"[")	// 使用快速枚举遍历NSSet集合	for obj in collection	{		result.appendString(obj as String)		result.appendString(", ")	}	// 获取字符串长度	let len = result.length	// 去掉字符串最后的两个字符	result.deleteCharactersInRange(NSMakeRange(len - 2, 2))	result.appendString("]")	return result}// 用4个元素初始化NSSet集合，// 故意传入两个相等的元素, NSSet集合只会保留一个元素var set1 = NSSet(objects:"疯狂iOS讲义" , "疯狂Android讲义",	"疯狂Ajax讲义" ,"疯狂iOS讲义")// 程序输出set1集合中元素个数为3println("set1集合中元素个数为\(set1.count)")println("s1集合：\(NSCollectionToString(set1))")let set2 = NSSet(objects: "孙悟空" , "疯狂Android讲义", "猪八戒")println("s2集合：\(NSCollectionToString(set2))")// 向set1集合中添加单个元素，将添加元素后生成的新集合赋给set1set1 = set1.setByAddingObject("疯狂Swift讲义")println("添加一个元素后：\(NSCollectionToString(set1))")// 使用NSSet集合向set1集合中添加多个元素，相当于计算两个集合的并集let s = set1.setByAddingObjectsFromSet(set2)println("set1与set2的并集：\(NSCollectionToString(s))")let b = set1.intersectsSet(set2)  // 计算两个NSSet集合是否有交集println("set1与set2是否有交集：\(b)")  // 将输出truelet bo = set2.isSubsetOfSet(set1)  // 判断set2是否是set1的子集println("set2是否为set1的子集：\(bo)")  // 将输出false// 判断NSSet集合是否包含指定元素let bb = set1.containsObject("疯狂Ajax讲义")println("set1是否包含\"疯狂Ajax讲义\"：\(bb)")// 将输出true// 下面两行代码将取出相同的元素，但取出哪个元素是不确定的println("set1取出一个元素：\(set1.anyObject())")println("set1取出一个元素：\(set1.anyObject())")// 使用闭包对集合元素进行过滤let filteredSet = set1.objectsPassingTest(){	(obj: AnyObject!, stop: UnsafeMutablePointer<ObjCBool>) -> Bool in	return (obj as NSString).length > 8}println("set1中元素的长度大于8的集合元素有：\(NSCollectionToString(filteredSet))")