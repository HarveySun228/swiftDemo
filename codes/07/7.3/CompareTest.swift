class User{	var name: String	var age: Int		init(name:String , age:Int)	{		self.name = name		self.age = age	}}var u1 = User(name: "abc", age: 12)var u2 = User(name: "abc", age: 12)// 如果u1和u2引用的不是同一个对象，===比较得到falseprintln(u1 === u2)  // 输出false// 如果u1和u2引用的不是同一个对象，!==比较得到trueprintln(u1 !== u2)  // 输出true// 将u1赋值给u3，实际上就是让u1、u3指向同一个对象var u3 = u1println(u1 === u3)  // 输出trueprintln(u1 !== u3)  // 输出falsestruct Level{	var grade: Int}var lv1 = Level(grade:20)var lv2 = Level(grade:20)// ===和!==不能比较值类型的变量，因此下面两行代码引起编译错误//println(lv1 === lv2)//println(lv1 !== lv2)func == (left:User , right: User) -> Bool{	// 只要两个User的name、age都相等，==比较就可以返回true	return left.name == right.name && left.age == right.age}func != (left:User , right: User) -> Bool{	return !(left == right)}var result = u1 == u2println(result)println(u1 != u2)