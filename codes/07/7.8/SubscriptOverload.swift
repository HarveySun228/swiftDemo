// 扩展Stringextension String{	subscript(idx: Int) -> String	{		get{			// 如果下标位于字符串长度之内			if idx > -1 && idx < countElements(self)			{				var count = 0				var result = ""				// 通过遍历搜索字符串内指定索引处的字符				for ch in self				{					if count == idx					{						// 将找到的字符转换为字符串						result = "\(ch)"					}					count++				}				return result			}			// 如果下标没有位于字符串长度之内，返回空字符串			else			{				return ""			}		}		set{			var result = ""			var count = 0			for ch in self			{				if count == idx				{					result += newValue				}				else				{					result += "\(ch)"				}				count++			}			self = result		}	}	// 定义只读下标	subscript(start: Int , end: Int) -> String	{		// 如果start、end都位于字符串长度之内，且start小于end		if start > -1 && start < countElements(self)			&& end > -1 && end <= countElements(self)			&& start < end		{				var result = ""			var count = 0			for ch in self			{				if count >= start && count < end				{					result.append(ch)				}				count++			}			return result		}		// 如果给定的下标不符合要求，程序直接返回空字符串		else		{			return ""		}	}}// 定义一个字符串var s = "fkit.org is a excellent training center"// 通过下标访问索引为5的字符println(s[5])  // 输出 o// 通过下标改变字符串指定索引处的字符s[0] = "F"s[2] = "I"println(s)// 通过带两个Int参数的下标来获取字符串中间范围的子串println(s[2, 6])  // 输出 It.o