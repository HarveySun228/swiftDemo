// 定义一个计算阶乘的全局函数func factorial(n: Int) -> Int{	var result = 1	for idx in 1 ... n {		result *= idx	}	return result}struct SomeStruct{	// 将一个闭包作为info存储属性的初始值	var info: ()->Void = {		println("info方法")	}	// 将factorial全局函数作为fact存储属性的初始值	static var fact:(Int) -> Int = factorial}var sc = SomeStruct()// 调用info方法sc.info()  // ①// 使用闭包对sc对象的info赋值，相当于重新定义sc的info方法sc.info = {	println("另外一个闭包")}// 再次调用info方法将会看到完全不同的输出sc.info()  // ②var n = 6// 调用fact方法，执行的是阶乘println("\(n)的阶乘是：\(SomeStruct.fact(6))")  // ③// 使用闭包对SomeStruct的fact赋值，相当于重新定义SomeStruct的fact方法SomeStruct.fact = {	var result = 1	for idx in 1 ... $0 {		result += idx	}	return result}// 再次调用fact方法，执行的是累加println("\(n)的累加的和是：\(SomeStruct.fact(6))")  // ④