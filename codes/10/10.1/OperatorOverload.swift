var a = 5var b = 20println(a + b)var c = 1.3var d = 5.4println(c + d)// 重新定义名为+的运算符，该运算符的第一个操作数是Int、第二个操作数是Doublefunc + (left:Int , right:Double) -> Double{	return Double(left) + right}// 重新定义名为+的运算符，该运算符的第一个操作数是Double、第二个操作数是Intfunc + (left:Double , right:Int) -> Double{	return left + Double(right)}// 使用重载后的+对Int、Double执行加法println(b + d)println(c + a)// 定义带泛型声明的+运算符函数func + <T> (var left:[T] , right:T) -> [T]{	// 调用数组的append()方法添加元素	left.append(right)	return left}var myList = ["Swift" , "iOS" , "Android"]// 直接使用+为数组添加元素myList = myList + "Objective-C"println(myList)// 定义带泛型声明的+运算符函数// 该函数的第一个形参是字典，第二个形参是一个元组func + <KeyType , ValueType> (var left:[KeyType:ValueType]		, right:(KeyType , ValueType)) -> [KeyType : ValueType]{	// 获取元组中的key、value	let (key , value) = right	// 将元组中的key、value添加到原字典中	left.updateValue(value, forKey: key)	return left}var score = ["语文": 90 , "数学": 89]score = score + ("英语" , 89)println(score)