import Foundationlet hanArr = ["零" , "壹" , "贰" , "叁" , "肆" , 	"伍" , "陆" , "柒" , "捌" , "玖"]let unitArr = ["拾" , "佰" , "仟"]/** * 把一个浮点数分解成整数部分和小数部分字符串 * num参数代表需要被分解的浮点数 * 返回分解出来的整数部分和小数部分。第一个成员是整数部分，第二个成员是小数部分 */func divide(num:Double)->(String, String){	// 将一个浮点数强制类型转换为Int64型，即得到它的整数部分	var zheng = Int64(num)	// 浮点数减去整数部分，得到小数部分，小数部分乘以100后四舍五入取整得到2位小数	var xiao = round((num - Double(zheng)) * 100)	// 返回一个元组作为该函数的2个返回值	return ("\(zheng)" , "\(Int(xiao))")}/* * 把一个四位的数字字符串变成汉字字符串 * numStr参数代表需要被转换的四位的数字字符串 * 返回四位的数字字符串被转换成汉字字符串 */func toHanStr(numStr:String) -> String{	var result = ""	var numLen = countElements(numStr)	var i = 0	// 依次遍历数字字符串的每一位数字	for codeUnit in numStr.utf8	{		// 把字符型数字转换成Int型数字，		// 把字符型数字转换成Int型数字的数值相差48		var num = Int(codeUnit) - 48		// 如果不是最后一位数字，而且数字不是零，则需要添加单位（千、百、十）		if (i != numLen - 1) && (num != 0)		{			result += (hanArr[num] + unitArr[numLen - 2 - i])		}		// 否则不要添加单位		else		{			result += hanArr[num]		}		i++	}	return result}// 测试把一个浮点数分解成整数部分和小数部分println(divide(236711125.127))// 测试把一个四位的数字字符串变成汉字字符串println(toHanStr("4109"))