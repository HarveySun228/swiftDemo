// 使用泛型语法声明数组var myArr : Array<String>// 使用简化语法声明数组var names : [String]var nums : [Int]// 创建一个空数组，并将该空数组赋值给myArr变量myArr = Array<String>()// 创建一个包含10个"fkit"元素的数组，并将该数组赋值给names变量names = Array<String>(count: 10, repeatedValue: "fkit")// 创建一个包含100个数值0的数组，并将该数组赋值给nums变量nums = Array<Int>(count: 100, repeatedValue: 0)// 使用简化语法创建数组，并将数组赋值给flowers变量var flowers:[String] = ["♦" , "♣" , "❤" , "♠"]// 使用简化语法创建数组，并将数组赋值给values变量var values = ["2" , "3" , "3" , "4" , "5" , "6",	"7" , "8" , "9" , "10" , "J" , "Q" , "K" , "A"]	// 输出names数组的第二个元素，将输出字符串"fkit"println(names[1])// 为names的第一个数组元素赋值names[0] = "Spring"println(names)//println(names[10])// 使用循环输出flowers数组的每个数组元素的值for var i = 0; i < flowers.count ; i++{	println(flowers[i])}// 对names数组的数组元素进行赋值names[1] = "Lua"names[2] = "Ruby"// 使用循环输出names数组的每个数组元素的值for var i = 0 ; i < names.count ; i++{	println(names[i])}