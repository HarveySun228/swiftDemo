// 使用泛型语法声明字典var myDict : Dictionary<String, String>// 使用简化语法声明字典var scores : [String:Int]var health : [String:String]// 创建一个Dictionary结构体，使用默认的参数myDict = Dictionary<String, String>()// 将minimumCapacity参数设为5，创建Dictionary结构体scores = Dictionary<String, Int>(minimumCapacity:5)println(scores)// 使用简化语法创建字典health = ["身高":"178" , "体重":"74" , "血压":"86/113"]println(health)var dict = ["one": 1 , "two": 2 , "three": 3, "four": 4]println(dict)// 使用简化语法创建不包含key-value对的字典var emptyDict:[String:Double] = [:]// isEmpty属性可判断数组、字典是否不包含任何元素println(emptyDict.isEmpty)  // 输出trueprintln(emptyDict) // 输出[:]var height = health["身高"]println("身高为：\(height)") // 输出Optional("178")// 访问并不存在的key对应的value时，将会返回nilvar noExist = health["no"]println(noExist)  // 输出nil// 修改指定key对应的valuehealth["血压"] = "78/112"println(health) // 输出[体重: 74, 血压: 78/112, 身高: 178]// 对不存在的key设置value，该字典将会添加key-value对scores["语文"] = 87scores["数学"] = 92scores["英文"] = 95println(scores)  // 输出[数学: 92, 语文: 87, 英文: 95]// 注意englishScore的类型是Int?，而不是Intvar englishScore: Int? =  scores["英文"]if englishScore != nil{	// 注意程序使用!执行强制解析	println("scores中包含的英文成绩为：\(englishScore!)")}// 为scores添加新的key-value对var result = scores.updateValue(20, forKey:"java")// 由于上面调用updateValue()方法并未替换已有的key-value对，因此result为nilprintln(result)  // 输出nilprintln(scores)  // 输出[数学: 92, 语文: 87, 英文: 95]